import tkinter as tk
from tkinter import colorchooser

class DrawingBoard:
    def __init__(self, root):
        self.root = root
        self.root.title("Python Drawing Board")

        self.canvas = tk.Canvas(root, bg="white", width=800, height=600)
        self.canvas.pack(expand=tk.YES, fill=tk.BOTH)

        self.color = "black"
        self.brush_size = 2
        self.shape_tool = "pen"
        self.start_x = None
        self.start_y = None

        self.create_widgets()

    def create_widgets(self):
        menu_bar = tk.Menu(self.root)
        self.root.config(menu=menu_bar)

        # File Menu
        file_menu = tk.Menu(menu_bar, tearoff=0)
        menu_bar.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="Exit", command=self.root.destroy)

        # Edit Menu
        edit_menu = tk.Menu(menu_bar, tearoff=0)
        menu_bar.add_cascade(label="Edit", menu=edit_menu)
        edit_menu.add_command(label="Change Color", command=self.change_color)
        edit_menu.add_command(label="Change Brush Size", command=self.change_brush_size)
        edit_menu.add_command(label="Clear Canvas", command=self.clear_canvas)

        # Shape Tools Menu
        shape_menu = tk.Menu(menu_bar, tearoff=0)
        menu_bar.add_cascade(label="Shape Tools", menu=shape_menu)
        shape_menu.add_command(label="Pen", command=lambda: self.set_shape_tool("pen"))
        shape_menu.add_command(label="Line", command=lambda: self.set_shape_tool("line"))
        shape_menu.add_command(label="Rectangle", command=lambda: self.set_shape_tool("rectangle"))
        shape_menu.add_command(label="Oval", command=lambda: self.set_shape_tool("oval"))

        self.canvas.bind("<B1-Motion>", self.paint)
        self.canvas.bind("<ButtonRelease-1>", self.reset)

    def paint(self, event):
        x1, y1 = (event.x - self.brush_size), (event.y - self.brush_size)
        x2, y2 = (event.x + self.brush_size), (event.y + self.brush_size)

        if self.shape_tool == "pen":
            self.canvas.create_oval(x1, y1, x2, y2, fill=self.color, outline=self.color, width=0)
        elif self.shape_tool == "line" and self.start_x is not None and self.start_y is not None:
            self.canvas.create_line(self.start_x, self.start_y, event.x, event.y, fill=self.color, width=self.brush_size * 2)
        elif self.shape_tool in ["rectangle", "oval"] and self.start_x is not None and self.start_y is not None:
            self.canvas.delete("temp_shape")
            if self.shape_tool == "rectangle":
                self.canvas.create_rectangle(self.start_x, self.start_y, event.x, event.y, fill=self.color, outline=self.color, tags="temp_shape")
            elif self.shape_tool == "oval":
                self.canvas.create_oval(self.start_x, self.start_y, event.x, event.y, fill=self.color, outline=self.color, tags="temp_shape")

    def reset(self, event):
        self.start_x, self.start_y = None, None
        if self.shape_tool in ["line", "rectangle", "oval"]:
            self.canvas.delete("temp_shape")

    def change_color(self):
        color = colorchooser.askcolor(title="Choose Color")[1]
        if color:
            self.color = color

    def change_brush_size(self):
        brush_size = simpledialog.askinteger("Brush Size", "Enter brush size:", parent=self.root, minvalue=1)
        if brush_size:
            self.brush_size = brush_size

    def clear_canvas(self):
        self.canvas.delete("all")

    def set_shape_tool(self, shape_tool):
        self.shape_tool = shape_tool
        if shape_tool in ["line", "rectangle", "oval"]:
            self.canvas.delete("temp_shape")


if __name__ == "__main__":
    root = tk.Tk()
    app = DrawingBoard(root)
    root.mainloop()
